Query Optimization

use world;
-- SELECT
-- select * from city where CountryCode="IND";
-- optimize table city;

-- Nested
-- select Name from city 
-- where Population > (select AVG(Population) from city) and
-- CountryCode in (select Code from country
-- where Population > (select AVG(Population) from country));
-- optimize table city,country;

-- Right Join
-- select * from city right join country
-- on city.CountryCode in 
-- (select code from country where LifeExpectancy>80.0);
-- optimise table city,country;

-- Inner Join
-- select * from city inner join country
-- on city.CountryCode in 
-- (select code from country where LifeExpectancy>75.0);

-- Indexing
-- create index Name on country(Name);
-- select * from country where Name = "India";


2 Phase
#Server
import socket
host = "127.0.0.1"
port = 8000

s = socket.socket()
s.bind((host,port))
s.listen(3)
print("SERVER IS RUNNING")

msg = "PREPARE"
log=msg

over = 0

while True:
    replies = []
    print(f"COORDINATOR: {msg.upper()}")
    for i in range(3):
        c,adrr = s.accept()
        c.send(msg.encode())
        data = c.recv(1024).decode()
        replies.append(data.upper())
        print(f"Subordinator {i} {adrr} : {data.upper()}")
    if over == 1:
        break
    if "ABORT" in replies:
        msg = "ABORT"
        print(f"TRANSACTION LOG : {log} {msg}")
        over = 1
    elif "SUCCESS" in replies:
        msg = "COMPLETE"
        print(f"TRANSACTION LOG : {log} {msg}")
        over = 1
    else:
        msg = "COMMIT"
        log += " "+msg
    

#Client

import socket
host = "127.0.0.1"
port = 8000
log = ""
over = 0
msg =""

while True:
    try:
        s = socket.socket()
        s.connect((host,port))
        data = s.recv(1024).decode().upper()
        print(f"COORDINATOR: {data}")
        if data == "ABORT":
            msg = "OK"
            print("TRANSACTION ABORTED!")
            print("END OF TRANSACTION\n final log is: ",log+" "+data)
            over =1
        elif data =="COMPLETE":
            msg="OK"
            print("TRANSACTION COMPLETED!")
            print("END OF TRANSACTION\n final log is: ",log+" "+data)
            over =1
        else:
            data = input("SYSTEM STATUS: ").upper()
            s.send(data.encode())
            log += data+" "
        if over == 1:
            break
    except:
        print("END OF TRANSACTION\n final log is: ",log+" "+data)
        break



Partition

use adbms_sales;

-- RANGE

-- create table sales_range (sales_id int not null,cust_id int not null, cust_name varchar(50), amount int)
-- partition by range(amount)
-- (
-- partition p0 values less than (1000),
-- partition p1 values less than (2000),
-- partition p2 values less than (3000),
-- partition p3 values less than (4000)
-- );
-- insert into sales_range values
-- (1,2,"A",500),
-- (2,4,"B",2995),
-- (3,6,"C",995),
-- (4,8,"D",3995),
-- (5,5,"E",1995);
-- select * from sales_range;
-- select * from information_schema.partitions where table_schema = 'adbms_sales' AND table_name = "sales_range";

-- List
-- create table sales_list(id int not null,amount int)
-- partition by list(id)
-- (
--  partition p_1 values in (1,5,9),
--  partition p_2 values in (2,6,10),
--  partition p_3 values in (3,7,11),
--  partition p_4 values in (4,8,12)
-- );
-- insert into sales_list values (1,500),(2,600),(4,900),(9,872),(3,87);
-- select * from information_schema.partitions where table_schema = "adbms_sales" and table_name = "sales_list";

-- Hash
-- create table sales_hash (id int not null,amount int)
-- partition by hash(id)
-- partitions 4;
-- insert into sales_hash values (1,500),(2,600),(4,900),(9,872),(3,87);
-- select * from information_schema.partitions where table_schema = "adbms_sales" AND table_name = "sales_hash";

-- Key
-- create table sales_key (id int primary key,amount int )
-- partition by key()
-- partitions 2;
-- insert into sales_key values (1,500),(2,600),(4,900);
-- select * from information_schema.partitions where table_schema = "adbms_sales" AND table_name = "sales_key";




JSON
USE LIVE SERVER EXTENSION
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1>Hello</h1>
    <button id="butt">Load it</button>
    <p id="new"></p>
    <script type="module">
        import myjson from './new.json' assert {type: 'json'}
        var ptag=document.getElementById("new")
        document.getElementById("butt").addEventListener("click",()=>{
            console.log(myjson)
            ptag.innerHTML=myjson.name
        })
    </script>
</body>
</html>
 


New.json File
{
    "name":"Ayush"
}
 
 

import json
f=open("x.json")
data=json.load(f)
print(data)

{
    "Name":"Ayush"
}


Btree


from BTrees.IIBTree import  IIBTree
import time

t = IIBTree()
insertion_start_time= time.time()
for i in range(1000):
    t.update({i: 2*i})
insertion_end_time=time.time()
print("Insertion time:", format((insertion_end_time-insertion_start_time)*1000, ".3f"),  "milliseconds")
key = int(input("enter key: "))
search_start_time = time.time()
if  t.has_key(key):
    print(t[key])
search_end_time = time.time()
print("Search time:", format((search_end_time-search_start_time)*1000, ".3f"), "milliseconds")

B+tree

from bplustree import BPlusTree
import time

tree = BPlusTree('/tmp/bplustree.db', order=1000)
insertion_start_time= time.time()
for i in range(1000):
    data=(2*i).to_bytes(10,'big')
    tree[i]=data
insertion_end_time=time.time()
print("Insertion time:", format((insertion_end_time-insertion_start_time)*1000, ".3f"),  "ms")
while True:
    data=int(input("Enter key : "))
    if data<0 or data>999:
        break
    start_time=time.time()
    byte_data=tree.get(data)
    end_time=time.time()
    int_data=int.from_bytes(byte_data, 'big')
    print("Value : ",int_data)
    print("Time taken : ",(end_time-start_time)*1000," ms")

tree.close()


XML
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
</head>

<body>
  <div id="mihir"></div>
  <button onclick="loadXMLDoc()">click</button>

  <script>
    function loadXMLDoc() {
      var xmlhttp = new XMLHttpRequest();
      xmlhttp.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
          myFunction(this);
        }
      };
      xmlhttp.open("GET", "note.xml", true);
      xmlhttp.send();
    }
    function myFunction(xml) {
      var i;
      var xmlDoc = xml.responseXML;
      var x = xmlDoc.getElementsByTagName("note");
      var yogesh = "<div> " + x[0].getElementsByTagName("to")[0].childNodes[0].nodeValue + " </div>"
      document.getElementById("mihir").innerHTML = yogesh;
    }
  </script>

</body>
</html>


note.xml file
<?xml version="1.0"?>
<catalog>
  <note>
    <to>Yogesh</to>
    <from>Jani</from>
    <heading>Reminder</heading>
    <body>Don't forget me this weekend!</body>
  </note>
</catalog>



